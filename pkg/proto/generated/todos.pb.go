// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.3
// source: todos.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// TodoChangeType is a change type
type TodoChangeType int32

const (
	TodoChangeType_CREATE TodoChangeType = 0
	TodoChangeType_UPDATE TodoChangeType = 1
	TodoChangeType_DELETE TodoChangeType = 2
)

// Enum value maps for TodoChangeType.
var (
	TodoChangeType_name = map[int32]string{
		0: "CREATE",
		1: "UPDATE",
		2: "DELETE",
	}
	TodoChangeType_value = map[string]int32{
		"CREATE": 0,
		"UPDATE": 1,
		"DELETE": 2,
	}
)

func (x TodoChangeType) Enum() *TodoChangeType {
	p := new(TodoChangeType)
	*p = x
	return p
}

func (x TodoChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TodoChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_todos_proto_enumTypes[0].Descriptor()
}

func (TodoChangeType) Type() protoreflect.EnumType {
	return &file_todos_proto_enumTypes[0]
}

func (x TodoChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TodoChangeType.Descriptor instead.
func (TodoChangeType) EnumDescriptor() ([]byte, []int) {
	return file_todos_proto_rawDescGZIP(), []int{0}
}

// NewTodo is a new todo
type NewTodo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Body  string `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (x *NewTodo) Reset() {
	*x = NewTodo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_todos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTodo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTodo) ProtoMessage() {}

func (x *NewTodo) ProtoReflect() protoreflect.Message {
	mi := &file_todos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTodo.ProtoReflect.Descriptor instead.
func (*NewTodo) Descriptor() ([]byte, []int) {
	return file_todos_proto_rawDescGZIP(), []int{0}
}

func (x *NewTodo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewTodo) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

// Todo is a todo
type Todo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Body  string `protobuf:"bytes,3,opt,name=Body,proto3" json:"Body,omitempty"`
	Index int64  `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
}

func (x *Todo) Reset() {
	*x = Todo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_todos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Todo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Todo) ProtoMessage() {}

func (x *Todo) ProtoReflect() protoreflect.Message {
	mi := &file_todos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Todo.ProtoReflect.Descriptor instead.
func (*Todo) Descriptor() ([]byte, []int) {
	return file_todos_proto_rawDescGZIP(), []int{1}
}

func (x *Todo) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Todo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Todo) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Todo) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

// TodoList is a list of todos
type TodoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Todos []*Todo `protobuf:"bytes,1,rep,name=Todos,proto3" json:"Todos,omitempty"`
}

func (x *TodoList) Reset() {
	*x = TodoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_todos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodoList) ProtoMessage() {}

func (x *TodoList) ProtoReflect() protoreflect.Message {
	mi := &file_todos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodoList.ProtoReflect.Descriptor instead.
func (*TodoList) Descriptor() ([]byte, []int) {
	return file_todos_proto_rawDescGZIP(), []int{2}
}

func (x *TodoList) GetTodos() []*Todo {
	if x != nil {
		return x.Todos
	}
	return nil
}

// TodoID is a todo's ID
type TodoID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *TodoID) Reset() {
	*x = TodoID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_todos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodoID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodoID) ProtoMessage() {}

func (x *TodoID) ProtoReflect() protoreflect.Message {
	mi := &file_todos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodoID.ProtoReflect.Descriptor instead.
func (*TodoID) Descriptor() ([]byte, []int) {
	return file_todos_proto_rawDescGZIP(), []int{3}
}

func (x *TodoID) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

// TodoReorder is a request to reorder a todo
type TodoReorder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (x *TodoReorder) Reset() {
	*x = TodoReorder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_todos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodoReorder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodoReorder) ProtoMessage() {}

func (x *TodoReorder) ProtoReflect() protoreflect.Message {
	mi := &file_todos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodoReorder.ProtoReflect.Descriptor instead.
func (*TodoReorder) Descriptor() ([]byte, []int) {
	return file_todos_proto_rawDescGZIP(), []int{4}
}

func (x *TodoReorder) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TodoReorder) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// TodoChange is a change with the changed todo
type TodoChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TodoChangeType `protobuf:"varint,1,opt,name=type,proto3,enum=todos.TodoChangeType" json:"type,omitempty"`
	Todo *Todo          `protobuf:"bytes,2,opt,name=todo,proto3" json:"todo,omitempty"`
}

func (x *TodoChange) Reset() {
	*x = TodoChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_todos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodoChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodoChange) ProtoMessage() {}

func (x *TodoChange) ProtoReflect() protoreflect.Message {
	mi := &file_todos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodoChange.ProtoReflect.Descriptor instead.
func (*TodoChange) Descriptor() ([]byte, []int) {
	return file_todos_proto_rawDescGZIP(), []int{5}
}

func (x *TodoChange) GetType() TodoChangeType {
	if x != nil {
		return x.Type
	}
	return TodoChangeType_CREATE
}

func (x *TodoChange) GetTodo() *Todo {
	if x != nil {
		return x.Todo
	}
	return nil
}

var File_todos_proto protoreflect.FileDescriptor

var file_todos_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74,
	0x6f, 0x64, 0x6f, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x33, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x56, 0x0a, 0x04, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x2d,
	0x0a, 0x08, 0x54, 0x6f, 0x64, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x54, 0x6f,
	0x64, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x6f, 0x64, 0x6f,
	0x73, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x52, 0x05, 0x54, 0x6f, 0x64, 0x6f, 0x73, 0x22, 0x18, 0x0a,
	0x06, 0x54, 0x6f, 0x64, 0x6f, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x35, 0x0a, 0x0b, 0x54, 0x6f, 0x64, 0x6f, 0x52,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x58,
	0x0a, 0x0a, 0x54, 0x6f, 0x64, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x64,
	0x6f, 0x73, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x2e, 0x54, 0x6f,
	0x64, 0x6f, 0x52, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x2a, 0x34, 0x0a, 0x0e, 0x54, 0x6f, 0x64, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x32, 0xbb,
	0x02, 0x0a, 0x05, 0x54, 0x6f, 0x64, 0x6f, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x2e, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x6f,
	0x64, 0x6f, 0x1a, 0x0b, 0x2e, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x12,
	0x2f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0f, 0x2e, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0d, 0x2e, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x2e,
	0x54, 0x6f, 0x64, 0x6f, 0x49, 0x44, 0x1a, 0x0b, 0x2e, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x2e, 0x54,
	0x6f, 0x64, 0x6f, 0x12, 0x22, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x2e,
	0x74, 0x6f, 0x64, 0x6f, 0x73, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x1a, 0x0b, 0x2e, 0x74, 0x6f, 0x64,
	0x6f, 0x73, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x24, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x0d, 0x2e, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x49, 0x44,
	0x1a, 0x0b, 0x2e, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x2a, 0x0a,
	0x07, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x74, 0x6f, 0x64, 0x6f, 0x73,
	0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x0b, 0x2e, 0x74,
	0x6f, 0x64, 0x6f, 0x73, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x41, 0x0a, 0x12, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x2e,
	0x54, 0x6f, 0x64, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x30, 0x01, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_todos_proto_rawDescOnce sync.Once
	file_todos_proto_rawDescData = file_todos_proto_rawDesc
)

func file_todos_proto_rawDescGZIP() []byte {
	file_todos_proto_rawDescOnce.Do(func() {
		file_todos_proto_rawDescData = protoimpl.X.CompressGZIP(file_todos_proto_rawDescData)
	})
	return file_todos_proto_rawDescData
}

var file_todos_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_todos_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_todos_proto_goTypes = []interface{}{
	(TodoChangeType)(0), // 0: todos.TodoChangeType
	(*NewTodo)(nil),     // 1: todos.NewTodo
	(*Todo)(nil),        // 2: todos.Todo
	(*TodoList)(nil),    // 3: todos.TodoList
	(*TodoID)(nil),      // 4: todos.TodoID
	(*TodoReorder)(nil), // 5: todos.TodoReorder
	(*TodoChange)(nil),  // 6: todos.TodoChange
	(*empty.Empty)(nil), // 7: google.protobuf.Empty
}
var file_todos_proto_depIdxs = []int32{
	2,  // 0: todos.TodoList.Todos:type_name -> todos.Todo
	0,  // 1: todos.TodoChange.type:type_name -> todos.TodoChangeType
	2,  // 2: todos.TodoChange.todo:type_name -> todos.Todo
	1,  // 3: todos.Todos.Create:input_type -> todos.NewTodo
	7,  // 4: todos.Todos.List:input_type -> google.protobuf.Empty
	4,  // 5: todos.Todos.Get:input_type -> todos.TodoID
	2,  // 6: todos.Todos.Update:input_type -> todos.Todo
	4,  // 7: todos.Todos.Delete:input_type -> todos.TodoID
	5,  // 8: todos.Todos.Reorder:input_type -> todos.TodoReorder
	7,  // 9: todos.Todos.SubscribeToChanges:input_type -> google.protobuf.Empty
	2,  // 10: todos.Todos.Create:output_type -> todos.Todo
	3,  // 11: todos.Todos.List:output_type -> todos.TodoList
	2,  // 12: todos.Todos.Get:output_type -> todos.Todo
	2,  // 13: todos.Todos.Update:output_type -> todos.Todo
	2,  // 14: todos.Todos.Delete:output_type -> todos.Todo
	2,  // 15: todos.Todos.Reorder:output_type -> todos.Todo
	6,  // 16: todos.Todos.SubscribeToChanges:output_type -> todos.TodoChange
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_todos_proto_init() }
func file_todos_proto_init() {
	if File_todos_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_todos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTodo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_todos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Todo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_todos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_todos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodoID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_todos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodoReorder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_todos_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodoChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_todos_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_todos_proto_goTypes,
		DependencyIndexes: file_todos_proto_depIdxs,
		EnumInfos:         file_todos_proto_enumTypes,
		MessageInfos:      file_todos_proto_msgTypes,
	}.Build()
	File_todos_proto = out.File
	file_todos_proto_rawDesc = nil
	file_todos_proto_goTypes = nil
	file_todos_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TodosClient is the client API for Todos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TodosClient interface {
	// Create creates a todo
	Create(ctx context.Context, in *NewTodo, opts ...grpc.CallOption) (*Todo, error)
	// List lists all todos
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TodoList, error)
	// Get gets one todo
	Get(ctx context.Context, in *TodoID, opts ...grpc.CallOption) (*Todo, error)
	// Update updates one todo
	// Index can't be updated with the `Update` rpc, use the `Reorder` rpc
	Update(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error)
	// Delete deletes one todo
	Delete(ctx context.Context, in *TodoID, opts ...grpc.CallOption) (*Todo, error)
	// Reorder reorders a todo
	Reorder(ctx context.Context, in *TodoReorder, opts ...grpc.CallOption) (*Todo, error)
	// SubscribeToChanges subscribes to all changes
	SubscribeToChanges(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Todos_SubscribeToChangesClient, error)
}

type todosClient struct {
	cc grpc.ClientConnInterface
}

func NewTodosClient(cc grpc.ClientConnInterface) TodosClient {
	return &todosClient{cc}
}

func (c *todosClient) Create(ctx context.Context, in *NewTodo, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/todos.Todos/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TodoList, error) {
	out := new(TodoList)
	err := c.cc.Invoke(ctx, "/todos.Todos/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosClient) Get(ctx context.Context, in *TodoID, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/todos.Todos/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosClient) Update(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/todos.Todos/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosClient) Delete(ctx context.Context, in *TodoID, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/todos.Todos/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosClient) Reorder(ctx context.Context, in *TodoReorder, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/todos.Todos/Reorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosClient) SubscribeToChanges(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Todos_SubscribeToChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Todos_serviceDesc.Streams[0], "/todos.Todos/SubscribeToChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &todosSubscribeToChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Todos_SubscribeToChangesClient interface {
	Recv() (*TodoChange, error)
	grpc.ClientStream
}

type todosSubscribeToChangesClient struct {
	grpc.ClientStream
}

func (x *todosSubscribeToChangesClient) Recv() (*TodoChange, error) {
	m := new(TodoChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodosServer is the server API for Todos service.
type TodosServer interface {
	// Create creates a todo
	Create(context.Context, *NewTodo) (*Todo, error)
	// List lists all todos
	List(context.Context, *empty.Empty) (*TodoList, error)
	// Get gets one todo
	Get(context.Context, *TodoID) (*Todo, error)
	// Update updates one todo
	// Index can't be updated with the `Update` rpc, use the `Reorder` rpc
	Update(context.Context, *Todo) (*Todo, error)
	// Delete deletes one todo
	Delete(context.Context, *TodoID) (*Todo, error)
	// Reorder reorders a todo
	Reorder(context.Context, *TodoReorder) (*Todo, error)
	// SubscribeToChanges subscribes to all changes
	SubscribeToChanges(*empty.Empty, Todos_SubscribeToChangesServer) error
}

// UnimplementedTodosServer can be embedded to have forward compatible implementations.
type UnimplementedTodosServer struct {
}

func (*UnimplementedTodosServer) Create(context.Context, *NewTodo) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedTodosServer) List(context.Context, *empty.Empty) (*TodoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedTodosServer) Get(context.Context, *TodoID) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedTodosServer) Update(context.Context, *Todo) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedTodosServer) Delete(context.Context, *TodoID) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedTodosServer) Reorder(context.Context, *TodoReorder) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reorder not implemented")
}
func (*UnimplementedTodosServer) SubscribeToChanges(*empty.Empty, Todos_SubscribeToChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToChanges not implemented")
}

func RegisterTodosServer(s *grpc.Server, srv TodosServer) {
	s.RegisterService(&_Todos_serviceDesc, srv)
}

func _Todos_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTodo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todos.Todos/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).Create(ctx, req.(*NewTodo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todos_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todos.Todos/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todos_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todos.Todos/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).Get(ctx, req.(*TodoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todos_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todos.Todos/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).Update(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todos_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todos.Todos/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).Delete(ctx, req.(*TodoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todos_Reorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoReorder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).Reorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todos.Todos/Reorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).Reorder(ctx, req.(*TodoReorder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todos_SubscribeToChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodosServer).SubscribeToChanges(m, &todosSubscribeToChangesServer{stream})
}

type Todos_SubscribeToChangesServer interface {
	Send(*TodoChange) error
	grpc.ServerStream
}

type todosSubscribeToChangesServer struct {
	grpc.ServerStream
}

func (x *todosSubscribeToChangesServer) Send(m *TodoChange) error {
	return x.ServerStream.SendMsg(m)
}

var _Todos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "todos.Todos",
	HandlerType: (*TodosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Todos_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Todos_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Todos_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Todos_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Todos_Delete_Handler,
		},
		{
			MethodName: "Reorder",
			Handler:    _Todos_Reorder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToChanges",
			Handler:       _Todos_SubscribeToChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "todos.proto",
}
